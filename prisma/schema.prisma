datasource postgres {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator typegraphql {
    provider           = "typegraphql-prisma"
    output             = "../prisma/generated/type-graphql"
    emitTranspiledCode = true
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Campgrounds   Campground[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Campground {
    id                 String   @id @default(uuid())
    name               String
    description        String
    averageRating      Float    @default(0)
    primaryImageB64    String
    secondaryImageB64s String[]
    address            String
    price              Float
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId             String

    @@map("campgrounds")
}
